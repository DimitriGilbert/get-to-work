#!/usr/bin/env bash
# This script was generated by bashly 0.8.3 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
gtfw_usage() {
  if [[ -n $long_usage ]]; then
    printf "gtfw - Get To Work\n"
    echo

  else
    printf "gtfw - Get To Work\n"
    echo

  fi

  printf "Usage:\n"
  printf "  gtfw [command]\n"
  printf "  gtfw [command] --help | -h\n"
  printf "  gtfw --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  start         Start the workspace (default)"
  echo "  init          Init the workspace"
  echo "  add-execute   Add another execute on workspace start"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  CONFIG_DIRECTORY"
    printf "    Config directory\n"
    echo

  fi
}

# :command.usage
gtfw_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "gtfw start - Start the workspace\n"
    echo

  else
    printf "gtfw start - Start the workspace\n"
    echo

  fi

  printf "Usage:\n"
  printf "  gtfw start [options]\n"
  printf "  gtfw start --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --directory, -d DIRECTORY"
    printf "    Run in specified directory\n"
    printf "    Default: $(pwd)\n"
    echo

    # :flag.usage
    echo "  --execute, -e GTFW_EXECUTE_OPTION (repeatable)"
    printf "    Execute a command in workspace\n"
    echo

    # :flag.usage
    echo "  --save (repeatable)"
    printf "    Execute a command in workspace\n"
    echo

    # :flag.usage
    echo "  --gtfw-file GTFW_FILE"
    printf "    load a diffent file\n"
    printf "    Default: .gtfw\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  gtfw start\n"
    echo

  fi
}

# :command.usage
gtfw_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "gtfw init - Init the workspace\n"
    echo

  else
    printf "gtfw init - Init the workspace\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "Usage:\n"
  printf "  gtfw init [WORKSPACE_NAME] [options]\n"
  printf "  gtfw init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --directory, -d DIRECTORY"
    printf "    Run in specified directory\n"
    printf "    Default: $(pwd)\n"
    echo

    # :flag.usage
    echo "  --execute, -e GTFW_EXECUTE_OPTION (repeatable)"
    printf "    Execute a command in workspace\n"
    echo

    # :flag.usage
    echo "  --force, -f"
    printf "    force if exists\n"
    echo

    # :flag.usage
    echo "  --gtfw-file GTFW_FILE"
    printf "    load a diffent file\n"
    printf "    Default: .gtfw\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  WORKSPACE_NAME"
    printf "    Workspace name\n"
    printf "    Default: $(pwd)\n"
    echo

  fi
}

# :command.usage
gtfw_add_execute_usage() {
  if [[ -n $long_usage ]]; then
    printf "gtfw add-execute - Add another execute on workspace start\n"
    echo

  else
    printf "gtfw add-execute - Add another execute on workspace start\n"
    echo

  fi

  printf "Usage:\n"
  printf "  gtfw add-execute [EXECUTE...] [options]\n"
  printf "  gtfw add-execute --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --directory, -d DIRECTORY"
    printf "    Run in specified directory\n"
    printf "    Default: $(pwd)\n"
    echo

    # :flag.usage
    echo "  --gtfw-file GTFW_FILE"
    printf "    load a diffent file\n"
    printf "    Default: .gtfw\n"
    echo

    # :flag.usage
    echo "  --group GROUP"
    printf "    group to add to\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  EXECUTE..."
    printf "    command to execute\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  gtfw add-execute \"git status\"\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
gtfw_start_command() {
  # src/start_command.sh
  inspect_args

  source "${args[--directory]}/${args[--gtfw-file]}"

  if [ "${args[--execute]}" != "" ]; then
    eval "gtfw_execute+=(${args[--execute]})";
  fi

  for gtfw_ex in "${gtfw_execute[@]}"; do
    # echo "executing : $gtfw_ex";
    eval "$gtfw_ex";
  done;

}

# :command.function
gtfw_init_command() {
  # src/init_command.sh
  # inspect_args

  if [ ! -d "${args[--directory]}" ];then
    mkdir -p "${args[--directory]}";
  fi

  echo -e "# Get To Work\n" > "${args[--directory]}/${args[--gtfw-file]}"
  echo "gtfw_workspace=${args[workspace_name]}" >> "${args[--directory]}/${args[--gtfw-file]}"
  echo "gtfw_workspace_directory=${args[--directory]}" >> "${args[--directory]}/${args[--gtfw-file]}"
  echo -e "gtfw_execute=()\n" >> "${args[--directory]}/${args[--gtfw-file]}"

  echo "# to add stuff:" >> "${args[--directory]}/${args[--gtfw-file]}"
  echo -e "#  gtfw_execute+=(\"a_command 'with argument' --and-option\")\n" >> "${args[--directory]}/${args[--gtfw-file]}"

}

# :command.function
gtfw_add_execute_command() {
  # src/add_execute_command.sh
  # inspect_args

  eval "execute_add=(${args[execute]})";

  exgp="gtfw_execute";
  if [ "${args[--group]}" != "" ]; then
    exgp+="_${args[--group]}";
  fi

  for exac in "${execute_add[@]}"; do
    echo "${exgp}+=(\"$exac\")" >> "${args[--directory]}/${args[--gtfw-file]}";
  done

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    gtfw_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  start )
    action="start"
    shift
    gtfw_start_parse_requirements "$@"
    shift $#
    ;;

  init | s )
    action="init"
    shift
    gtfw_init_parse_requirements "$@"
    shift $#
    ;;

  add-execute )
    action="add-execute"
    shift
    gtfw_add_execute_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    gtfw_usage
    exit 1
    ;;

  * )
    action="start"
    gtfw_start_parse_requirements "$@"
    shift $#
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
gtfw_start_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    gtfw_start_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="start"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --directory | -d )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--directory]="$2"
        shift
        shift
      else
        printf "%s\n" "--directory requires an argument: --directory, -d DIRECTORY"
        exit 1
      fi
      ;;

    # :flag.case
    --execute | -e )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        if [[ -z ${args[--execute]+x} ]]; then
          args[--execute]="\"$2\""
        else
          args[--execute]="${args[--execute]} \"$2\""
        fi
        shift
        shift
      else
        printf "%s\n" "--execute requires an argument: --execute, -e GTFW_EXECUTE_OPTION"
        exit 1
      fi
      ;;

    # :flag.case
    --save )

      # :flag.case_no_arg
      (( args[--save]+=1 ))
      shift
      ;;

    # :flag.case
    --gtfw-file )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--gtfw-file]="$2"
        shift
        shift
      else
        printf "%s\n" "--gtfw-file requires an argument: --gtfw-file GTFW_FILE"
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1

      ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args[--directory]:-} ]] || args[--directory]="$(pwd)"
  [[ -n ${args[--gtfw-file]:-} ]] || args[--gtfw-file]=".gtfw"

}

# :command.parse_requirements
gtfw_init_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    gtfw_init_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --directory | -d )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--directory]="$2"
        shift
        shift
      else
        printf "%s\n" "--directory requires an argument: --directory, -d DIRECTORY"
        exit 1
      fi
      ;;

    # :flag.case
    --execute | -e )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        if [[ -z ${args[--execute]+x} ]]; then
          args[--execute]="\"$2\""
        else
          args[--execute]="${args[--execute]} \"$2\""
        fi
        shift
        shift
      else
        printf "%s\n" "--execute requires an argument: --execute, -e GTFW_EXECUTE_OPTION"
        exit 1
      fi
      ;;

    # :flag.case
    --force | -f )

      # :flag.case_no_arg
      args[--force]=1
      shift
      ;;

    # :flag.case
    --gtfw-file )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--gtfw-file]="$2"
        shift
        shift
      else
        printf "%s\n" "--gtfw-file requires an argument: --gtfw-file GTFW_FILE"
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[workspace_name]+x} ]]; then

        args[workspace_name]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi

      ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args[workspace_name]:-} ]] || args[workspace_name]="$(pwd)"
  [[ -n ${args[--directory]:-} ]] || args[--directory]="$(pwd)"
  [[ -n ${args[--gtfw-file]:-} ]] || args[--gtfw-file]=".gtfw"

}

# :command.parse_requirements
gtfw_add_execute_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    gtfw_add_execute_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="add-execute"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --directory | -d )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--directory]="$2"
        shift
        shift
      else
        printf "%s\n" "--directory requires an argument: --directory, -d DIRECTORY"
        exit 1
      fi
      ;;

    # :flag.case
    --gtfw-file )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--gtfw-file]="$2"
        shift
        shift
      else
        printf "%s\n" "--gtfw-file requires an argument: --gtfw-file GTFW_FILE"
        exit 1
      fi
      ;;

    # :flag.case
    --group )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--group]="$2"
        shift
        shift
      else
        printf "%s\n" "--group requires an argument: --group GROUP"
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_repeatable
      if [[ -z ${args[execute]+x} ]]; then

        args[execute]="\"$1\""
        shift
      else
        args[execute]="${args[execute]} \"$1\""
        shift
      fi

      ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args[--directory]:-} ]] || args[--directory]="$(pwd)"
  [[ -n ${args[--gtfw-file]:-} ]] || args[--gtfw-file]=".gtfw"

}

# :command.initialize
initialize() {
  version="0.0.1"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "start" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      gtfw_start_usage
    else
      gtfw_start_command
    fi

  elif [[ $action == "init" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      gtfw_init_usage
    else
      gtfw_init_command
    fi

  elif [[ $action == "add-execute" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      gtfw_add_execute_usage
    else
      gtfw_add_execute_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
